{"version":3,"sources":["app.min.js"],"names":["MyApp","angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","controllerAs","service","$http","$window","this","syncMethod","getRooms","get","then","response","data","err","console","error","getRoom","roomId","createRoom","room","successEvent","post","defaults","headers","common","token","sessionStorage","sendMessage","msg","getUsersForRoom","findUserByName","name","blockUser","userId","put","user","JSON","stringify","unblockUser","getBlockedUsers","setMembership","role","login","failEvent","register","editProfile","editRoom","roomPassword","pw","getSessionToken","getSessionUser","undefined","parse","logout","showAvatar","avatar","avatarFileType","$scope","$location","ApiService","onSentPassword","getInRoom","rooms","reverse","forEach","messages","attemptRoom","log","passwordHash","pushRoom","path","_id","sendPassword","formatDate","date","Date","toLocaleString","chooseRoomColor","index","forbidden","Math","floor","directive","refreshBlockedUsers","users","blockedUsers","onUnblock","onEdit","setCurrentUser","nickname","currentUser","email","$watch","newValue","oldValue","scope","filesize","errormsg","base64","filetype","submit","onLoggedIn","onError","ImgService","userLoggedIn","skip","openRooms","r","toString","push","removeRoom","splice","indexOf","showImage","onCreatedRoom","newroom","filter","toggleFilter","onRegister","password","$stateParams","$anchorScroll","refreshMessages","x","moderator","onSend","setTimeout","hash","newmsg","refreshUsers","equals","members","editSuccess","inviteonly","unlisted","autorefresh","setInterval","send","changePassword","userToFind","foundUser","setMemberShip","refUsers","$on","clearInterval"],"mappings":"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","file":"app.min.js","sourcesContent":["var MyApp = angular.module(\"MyApp\", [\"ui.router\", \"naif.base64\"]);\n\nMyApp.config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\n  $urlRouterProvider.otherwise(\"/intro\");\n\n  $stateProvider\n    .state(\"main\", {\n      url: \"/\",\n      templateUrl: \"templates/main/main.html\",\n      controller: \"MainController\",\n      controllerAs: \"main\",\n    })\n    .state(\"main.intro\", {\n      url: \"intro\",\n      templateUrl: \"templates/intro/intro.html\",\n      controller: \"IntroController\",\n      controllerAs: \"intro\"\n    })\n    .state(\"main.room\", {\n      url: \"chatroom/:roomId\",\n      templateUrl: \"templates/room/room.html\",\n      controller: \"RoomController\",\n      controllerAs: \"room\"\n    })\n    .state(\"main.newroom\", {\n      url: \"newroom\",\n      templateUrl: \"templates/newroom/newroom.html\",\n      controller: \"NewRoomController\",\n      controllerAs: \"newroom\"\n    })\n    .state(\"main.login\", {\n      url: \"signin\",\n      templateUrl: \"templates/login/login.html\",\n      controller: \"LoginController\",\n      controllerAs: \"login\"\n    })\n    .state(\"main.register\", {\n      url: \"register\",\n      templateUrl: \"templates/register/register.html\",\n      controller: \"RegisterController\",\n      controllerAs: \"register\"\n    })\n    .state(\"main.edituser\", {\n      url: \"edituser\",\n      templateUrl: \"templates/edituser/edituser.html\",\n      controller: \"EditUserController\",\n      controllerAs: \"edituser\"\n    })\n    .state(\"main.other\", {\n      url: \"other\",\n      templateUrl: \"templates/other/other.html\",\n    });\n}]);\n\nMyApp.service(\"ApiService\", [\"$http\", \"$window\", function ($http, $window) {\n  this.syncMethod = function () {\n    return 0;\n  };\n\n//  var path = window.env.API_URL;\n//  console.log(path);\n\n  this.getRooms = function () {\n    return $http.get(\"/room\")\n      .then(function (response) {\n        return response.data;\n      })\n      .catch(function (err) {\n        console.error(\"Error ApiService getRooms \", err);\n        return {};\n      });\n  };\n\n  this.getRoom = function (roomId) {\n    return $http.get(\"/room/\" + roomId)\n      .then(function (response) {\n        return response.data;\n      })\n      .catch(function (err) {\n        console.error(\"Error ApiService getRoom \", err);\n        return {};\n      });\n  };\n  \n  this.createRoom = function (room, successEvent) {\n    return $http.post(\"/room\", room)\n      .then (function (response) {\n        $http.defaults.headers.common['X-Access-Token'] = response.data.token;\n        $window.sessionStorage.token = response.data.token;\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error room could not be created: \" + response.data)\n      });\n  }\n  \n  this.sendMessage = function (roomId, msg, successEvent) {\n    return $http.post(\"/room/\" + roomId + \"/message\", msg)\n      .then(function (response) {\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error message could not be sent: \" + response.data);\n      });\n  };\n\n  this.getUsersForRoom = function (roomId) {\n    return $http.get(\"/room/\" + roomId + \"/member\")\n      .then (function (response) {\n        return response.data;\n      })\n      .catch(function (err) {\n        console.error(\"Error ApiService getUsersForRoom \", err);\n        return {};\n      });\n  };\n  \n  this.findUserByName = function (name) {\n    return $http.get(\"/user/\" + name)\n      .then (function (response) {\n        return response.data;\n      })\n      .catch(function (err) {\n        console.error(\"Error ApiService findUserByName \", err);\n        return {};\n      });\n  };\n  \n  this.blockUser = function (userId, successEvent) {\n    return $http.put(\"/user/\" + userId + \"/block\")\n      .then (function (response) {\n        $http.defaults.headers.common['X-Access-Token'] = response.data.token;\n        $window.sessionStorage.token = response.data.token;\n        $window.sessionStorage.user = JSON.stringify(response.data.user);\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error ApiService blockUser \", response.data);\n      });\n  };\n\n  this.unblockUser = function (userId, successEvent) {\n    return $http.put(\"/user/\" + userId + \"/unblock\")\n      .then (function (response) {\n        $http.defaults.headers.common['X-Access-Token'] = response.data.token;\n        $window.sessionStorage.token = response.data.token;\n        $window.sessionStorage.user = JSON.stringify(response.data.user);\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error ApiService blockUser \", response.data);\n      });\n  };\n  \n  this.getBlockedUsers = function () {\n    return $http.get(\"/blockedusers\")\n      .then (function (response) {\n        return response.data;\n      })\n      .catch(function (err) {\n        console.error(\"Error ApiService getBlockedUsers \", err);\n        return {};\n      });\n  };\n  \n  this.setMembership = function (userId, roomId, role, successEvent) {\n    return $http.post(\"/room/\" + roomId + \"/member\", {userId: userId, role: role})\n      .then (function (response) {\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error ApiService setMembership \", response.data);\n      });\n  };\n  \n  this.login = function (user, successEvent, failEvent) {\n    return $http.post(\"/login\", user)\n      .then(function (response) {\n        $http.defaults.headers.common['X-Access-Token'] = response.data.token;\n        $window.sessionStorage.token = response.data.token;\n        $window.sessionStorage.user = JSON.stringify(response.data.user);\n        successEvent(response.data);\n      },\n      function (response) {\n        failEvent(response.data);\n      });\n  };\n\n  this.register = function (user, successEvent) {\n    return $http.post(\"/user\", user)\n      .then(function (response) {\n        successEvent();\n      },\n      function (response) {\n        console.error(\"Error ApiService register: \" + response.data);\n      });\n  };\n  \n  this.editProfile = function(user, successEvent) {\n    return $http.put(\"/user\", user)\n      .then(function (response) {\n        $window.sessionStorage.user = JSON.stringify(user);\n        successEvent(user);\n      },\n      function (response) {\n        console.error(\"Error ApiService editProfile: \" + response.data);\n      });\n  };\n  \n  this.editRoom = function(roomId, room, successEvent) {\n    return $http.put(\"/room/\" + roomId, room)\n      .then(function (response) {\n        successEvent(room);\n      },\n      function (response) {\n        console.error(\"Error ApiService editRoom: \" + response.data);\n      });\n  };\n\n  this.roomPassword = function (roomId, pw, successEvent) {\n    return $http.post(\"/room/\" + roomId, pw)\n      .then(function (response) {\n        $http.defaults.headers.common['X-Access-Token'] = response.data.token;\n        $window.sessionStorage.token = response.data.token;\n        successEvent(response.data);\n      },\n      function (response) {\n        console.error(\"Error password could not be sent: \" + response.data);\n      });\n  };\n  \n  this.getSessionToken = function () {\n    $http.defaults.headers.common['X-Access-Token'] = $window.sessionStorage.token;\n  };\n  \n  this.getSessionUser = function() {\n    var user = $window.sessionStorage.user;\n    if (user == undefined || user == \"undefined\" || user == null)\n      return undefined;\n    return JSON.parse($window.sessionStorage.user);\n  };\n  \n  this.logout = function() {\n    delete $http.defaults.headers.common['X-Access-Token'];\n    delete $window.sessionStorage.token;\n    delete $window.sessionStorage.user;\n  };\n}]);\n\nMyApp.service(\"ImgService\", function () {\r\n  this.showAvatar = function(user) {\r\n    if (user.avatar == \"\" || user.avatar == undefined)\r\n      return \"img/noavatar.png\";\r\n    return \"data:\" + user.avatarFileType + \";base64,\" + user.avatar;\r\n  };\r\n});\r\n\nMyApp.controller(\"IntroController\", [\"$scope\", \"$location\", \"ApiService\", function ($scope, $location, ApiService) {\n  ApiService.getRooms()\n  .then(function(data) {\n    $scope.rooms = data;\n    $scope.rooms.reverse();\n    $scope.rooms.forEach(function (room) {\n      room.messages.reverse();\n    });\n  });\n  $scope.attemptRoom = function(room) {\n    console.log(room.passwordHash);\n  };\n  $scope.getInRoom = function(room) {\n    $scope.pushRoom(room);\n    $location.path(\"/chatroom/\" + room._id);\n  };\n  $scope.sendPassword = function(room) {\n    ApiService.roomPassword(room._id, {roomPassword: room.roomPassword}, onSentPassword);\n  };\n  \n  function onSentPassword(data) {\n    $scope.getInRoom(data.room);\n  }\n  \n  $scope.formatDate = function(date) {\n    return new Date(date).toLocaleString();\n  };\n\n  $scope.chooseRoomColor = function(room, index) {\n    if (room.forbidden)\n      return \"disabled\";\n    if (Math.floor(index / 4) % 2 == 0) {\n      if (index % 2 == 0) return \"room1\";\n      return \"room2\";\n    }\n    if (index % 2 == 0) return \"room2\";\n    return \"room1\";\n  };\n}]);\n\nMyApp.directive(\"navTop\", function () {\n  return {\n    templateUrl: \"templates/layout-directives/nav-top2.html\",\n  };\n});\n\nMyApp.controller(\"EditUserController\", [\"$scope\", \"$location\", \"ApiService\", function ($scope, $location, ApiService) {\n  $scope.blockedUsers = [];\n  refreshBlockedUsers();\n  $scope.user = {\n    nickname: $scope.currentUser.nickname,\n    email: $scope.currentUser.email,\n    avatar: $scope.currentUser.avatar,\n    avatarFileType: $scope.currentUser.avatarFileType,\n  };\n  \n  function refreshBlockedUsers()\n  {\n    ApiService.getBlockedUsers()\n    .then(function(users) {\n      $scope.blockedUsers = users;\n    });\n  }\n  \n  $scope.unblockUser = function(user) {\n    ApiService.unblockUser(user._id, onUnblock);\n  };\n  \n  function onUnblock(data)\n  {\n    refreshBlockedUsers();\n  }\n\n  $scope.$watch('avatar', function (newValue, oldValue, scope) {\n    if (newValue.filesize > 500000) {\n      scope.avatar = {};\n      scope.errormsg = \"Avatar too big\";\n    } else {\n      scope.user.avatar = newValue.base64;\n      scope.user.avatarFileType = newValue.filetype;\n    }\n  });\n  \n  $scope.submit = function() {\n    ApiService.editProfile($scope.user, onEdit);\n  };\n  \n  function onEdit(data) {\n    $scope.setCurrentUser(data);\n    $location.path(\"/intro\");\n  }\n}]);\n\nMyApp.controller(\"LoginController\", [\"$scope\", \"$location\", \"ApiService\", function ($scope, $location, ApiService) {\n  $scope.submit = function() {\n    ApiService.login($scope.user, onLoggedIn, onError);\n  }\n  \n  function onLoggedIn(data) {\n    $scope.setCurrentUser(data.user);\n    $location.path(\"/intro\");\n  }\n  \n  function onError(err) {\n    console.error(\"Error could not login: \" + err);\n  }\n}]);\n\nMyApp.controller(\"MainController\", [\"$scope\", \"ApiService\", \"ImgService\", function ($scope, ApiService, ImgService) {\n  ApiService.getSessionToken();\n  $scope.setCurrentUser = function(user) {\n    $scope.currentUser = user;\n  };\n  $scope.setCurrentUser(ApiService.getSessionUser());\n  $scope.userLoggedIn = function() {\n    return ApiService.getSessionUser() != undefined;\n  };\n  $scope.pushRoom = function(room) {\n    var skip = false;\n    $scope.openRooms.forEach(function (r) {\n      if (r._id.toString() == room._id.toString())\n        skip = true;\n    });\n    if (!skip)\n      $scope.openRooms.push(room);\n  };\n  $scope.removeRoom = function(room) {\n    $scope.openRooms.splice($scope.openRooms.indexOf(room), 1);\n  };\n  $scope.openRooms = [];\n  $scope.showImage = function(user) {\n    return ImgService.showAvatar(user);\n  };\n  $scope.logout = function() {\n    ApiService.logout();\n    $scope.setCurrentUser(undefined);\n  };\n}]);\n\nMyApp.controller(\"NewRoomController\", [\"$scope\", \"$location\", \"ApiService\", function ($scope, $location, ApiService) {\n  $scope.createRoom = function() {\n    ApiService.createRoom($scope.newroom, onCreatedRoom);\n  };\n  \n  function onCreatedRoom(data) {\n    $location.path(\"/room/\" + data.room._id);\n  }\n}]);\n\nMyApp.controller(\"OtherController\", [\"$scope\", function ($scope) {\n  $scope.filter = true;\n  $scope.toggleFilter = function () {\n    $scope.filter = !$scope.filter;\n  };\n}]);\n\nMyApp.controller(\"RegisterController\", [\"$scope\", \"$location\", \"ApiService\", function ($scope, $location, ApiService) {\n  $scope.user = {\n    nickname: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"user\",\n    avatar: \"\",\n    avatarFileType: \"\"\n  };\n  \n  $scope.avatar = {};\n  $scope.$watch('avatar', function (newValue, oldValue, scope) {\n    if (newValue.filesize > 500000) {\n      scope.avatar = {};\n      scope.errormsg = \"Avatar too big\";\n    } else {\n      scope.user.avatar = newValue.base64;\n      scope.user.avatarFileType = newValue.filetype;\n    }\n  });\n  \n  $scope.submit = function() {\n    ApiService.register($scope.user, onRegister);\n  };\n  \n  function onRegister() {\n    $location.path(\"/login\");\n  }\n}]);\n\nMyApp.controller(\"RoomController\", [\"$scope\", \"$stateParams\", \"$location\", \"$anchorScroll\", \"ApiService\", function ($scope, $stateParams, $location, $anchorScroll, ApiService) {\n  function refreshMessages(x) {\n    ApiService.getRoom($stateParams.roomId)\n    .then(function(data) {\n      $scope.room = data.room;\n      $scope.messages = data.room.messages;\n      $scope.moderator = data.moderator;\n      $scope.messages.reverse();\n    });\n  }\n  \n  function onSend(x) {\n    refreshMessages({});\n    setTimeout(function() {\n      $location.hash(\"sendbtn\");\n      $anchorScroll();    \n    }, 1000);\n    $scope.newmsg = \"\";    \n  }\n  \n  function refreshUsers(x) {\n    if (angular.equals($scope.currentUser, {}) || !$scope.moderator) {\n      return;\n    }\n    ApiService.getUsersForRoom($stateParams.roomId)\n    .then(function(data) {\n      $scope.members = data;\n    });\n  }\n\n  refreshMessages({});\n  setTimeout(function() {\n    $location.hash(\"sendbtn\");\n    $anchorScroll();  \n    $scope.newroom = {\n      name: $scope.room.name,\n      inviteonly: $scope.room.inviteonly,\n      unlisted: $scope.room.unlisted\n    };\n  }, 1000);\n  var autorefresh = setInterval(refreshMessages, 1000);\n  $scope.editSuccess = false;\n\n  $scope.send = function() {\n    ApiService.sendMessage($stateParams.roomId, $scope.newmsg, onSend);\n  };\n\n  $scope.editRoom = function() {\n    $scope.editSuccess = false;\n    if ($scope.changePassword) {\n      if ($scope.newroom == undefined || $scope.newroom.password == undefined)\n        $scope.newroom.password = \"\";\n    } else {\n      delete $scope.newroom.password;\n    }\n    ApiService.editRoom($stateParams.roomId, $scope.newroom, onEdit);\n  };\n  \n  function onEdit(x) {\n    $scope.editSuccess = true;\n    setTimeout(function(){$scope.editSuccess = false;}, 5000)\n    refreshMessages({});\n  }\n  \n  $scope.findUserByName = function() {\n    ApiService.findUserByName($scope.userToFind)\n    .then(function(data) {\n      $scope.foundUser = data;\n    });\n  };\n  \n  $scope.blockUser = function(userId) {\n    ApiService.blockUser(userId, refreshMessages);\n  };\n    \n  $scope.setMemberShip = function(user, role) {\n    ApiService.setMembership(user._id, $stateParams.roomId, role, refreshUsers);\n  };\n  \n  $scope.refUsers = function() {\n    refreshUsers({});\n  };\n  \n  $scope.formatDate = function(date) {\n    return new Date(date).toLocaleString();\n  };\n  \n  $scope.$on(\"$destroy\", function(){\n    clearInterval(autorefresh);\n  });\n}]);\n"]}