var MyApp=angular.module("MyApp",["ui.router","naif.base64"]);MyApp.config(["$stateProvider","$urlRouterProvider",function(e,o){o.otherwise("/intro"),e.state("main",{url:"/",templateUrl:"templates/main/main.html",controller:"MainController",controllerAs:"main"}).state("main.intro",{url:"intro",templateUrl:"templates/intro/intro.html",controller:"IntroController",controllerAs:"intro"}).state("main.room",{url:"chatroom/:roomId",templateUrl:"templates/room/room.html",controller:"RoomController",controllerAs:"room"}).state("main.newroom",{url:"newroom",templateUrl:"templates/newroom/newroom.html",controller:"NewRoomController",controllerAs:"newroom"}).state("main.login",{url:"signin",templateUrl:"templates/login/login.html",controller:"LoginController",controllerAs:"login"}).state("main.register",{url:"register",templateUrl:"templates/register/register.html",controller:"RegisterController",controllerAs:"register"}).state("main.edituser",{url:"edituser",templateUrl:"templates/edituser/edituser.html",controller:"EditUserController",controllerAs:"edituser"}).state("main.other",{url:"other",templateUrl:"templates/other/other.html"})}]),MyApp.service("ApiService",["$http","$window",function(e,o){this.syncMethod=function(){return 0},this.getRooms=function(){return e.get("/room").then(function(e){return e.data})["catch"](function(e){return console.error("Error ApiService getRooms ",e),{}})},this.getRoom=function(o){return e.get("/room/"+o).then(function(e){return e.data})["catch"](function(e){return console.error("Error ApiService getRoom ",e),{}})},this.createRoom=function(r,t){return e.post("/room",r).then(function(r){e.defaults.headers.common["X-Access-Token"]=r.data.token,o.sessionStorage.token=r.data.token,t(r.data)},function(e){console.error("Error room could not be created: "+e.data)})},this.sendMessage=function(o,r,t){return e.post("/room/"+o+"/message",r).then(function(e){t(e.data)},function(e){console.error("Error message could not be sent: "+e.data)})},this.getUsersForRoom=function(o){return e.get("/room/"+o+"/member").then(function(e){return e.data})["catch"](function(e){return console.error("Error ApiService getUsersForRoom ",e),{}})},this.findUserByName=function(o){return e.get("/user/"+o).then(function(e){return e.data})["catch"](function(e){return console.error("Error ApiService findUserByName ",e),{}})},this.blockUser=function(r,t){return e.put("/user/"+r+"/block").then(function(r){e.defaults.headers.common["X-Access-Token"]=r.data.token,o.sessionStorage.token=r.data.token,o.sessionStorage.user=JSON.stringify(r.data.user),t(r.data)},function(e){console.error("Error ApiService blockUser ",e.data)})},this.unblockUser=function(r,t){return e.put("/user/"+r+"/unblock").then(function(r){e.defaults.headers.common["X-Access-Token"]=r.data.token,o.sessionStorage.token=r.data.token,o.sessionStorage.user=JSON.stringify(r.data.user),t(r.data)},function(e){console.error("Error ApiService blockUser ",e.data)})},this.getBlockedUsers=function(){return e.get("/blockedusers").then(function(e){return e.data})["catch"](function(e){return console.error("Error ApiService getBlockedUsers ",e),{}})},this.setMembership=function(o,r,t,n){return e.post("/room/"+r+"/member",{userId:o,role:t}).then(function(e){n(e.data)},function(e){console.error("Error ApiService setMembership ",e.data)})},this.login=function(r,t,n){return e.post("/login",r).then(function(r){e.defaults.headers.common["X-Access-Token"]=r.data.token,o.sessionStorage.token=r.data.token,o.sessionStorage.user=JSON.stringify(r.data.user),t(r.data)},function(e){n(e.data)})},this.register=function(o,r){return e.post("/user",o).then(function(e){r()},function(e){console.error("Error ApiService register: "+e.data)})},this.editProfile=function(r,t){return e.put("/user",r).then(function(e){o.sessionStorage.user=JSON.stringify(r),t(r)},function(e){console.error("Error ApiService editProfile: "+e.data)})},this.editRoom=function(o,r,t){return e.put("/room/"+o,r).then(function(e){t(r)},function(e){console.error("Error ApiService editRoom: "+e.data)})},this.roomPassword=function(r,t,n){return e.post("/room/"+r,t).then(function(r){e.defaults.headers.common["X-Access-Token"]=r.data.token,o.sessionStorage.token=r.data.token,n(r.data)},function(e){console.error("Error password could not be sent: "+e.data)})},this.getSessionToken=function(){e.defaults.headers.common["X-Access-Token"]=o.sessionStorage.token},this.getSessionUser=function(){var e=o.sessionStorage.user;if(void 0!=e&&"undefined"!=e&&null!=e)return JSON.parse(o.sessionStorage.user)},this.logout=function(){delete e.defaults.headers.common["X-Access-Token"],delete o.sessionStorage.token,delete o.sessionStorage.user}}]),MyApp.service("ImgService",function(){this.showAvatar=function(e){return""==e.avatar||void 0==e.avatar?"img/noavatar.png":"data:"+e.avatarFileType+";base64,"+e.avatar}}),MyApp.controller("IntroController",["$scope","$location","ApiService",function(e,o,r){function t(o){e.getInRoom(o.room)}r.getRooms().then(function(o){e.rooms=o,e.rooms.reverse(),e.rooms.forEach(function(e){e.messages.reverse()})}),e.attemptRoom=function(e){console.log(e.passwordHash)},e.getInRoom=function(r){e.pushRoom(r),o.path("/chatroom/"+r._id)},e.sendPassword=function(e){r.roomPassword(e._id,{roomPassword:e.roomPassword},t)},e.formatDate=function(e){return new Date(e).toLocaleString()},e.chooseRoomColor=function(e,o){return e.forbidden?"disabled":Math.floor(o/4)%2==0?o%2==0?"room1":"room2":o%2==0?"room2":"room1"}}]),MyApp.directive("navTop",function(){return{templateUrl:"templates/layout-directives/nav-top2.html"}}),MyApp.controller("EditUserController",["$scope","$location","ApiService",function(e,o,r){function t(){r.getBlockedUsers().then(function(o){e.blockedUsers=o})}function n(e){t()}function s(r){e.setCurrentUser(r),o.path("/intro")}e.blockedUsers=[],t(),e.user={nickname:e.currentUser.nickname,email:e.currentUser.email,avatar:e.currentUser.avatar,avatarFileType:e.currentUser.avatarFileType},e.unblockUser=function(e){r.unblockUser(e._id,n)},e.$watch("avatar",function(e,o,r){e.filesize>5e5?(r.avatar={},r.errormsg="Avatar too big"):(r.user.avatar=e.base64,r.user.avatarFileType=e.filetype)}),e.submit=function(){r.editProfile(e.user,s)}}]),MyApp.controller("LoginController",["$scope","$location","ApiService",function(e,o,r){function t(r){e.setCurrentUser(r.user),o.path("/intro")}function n(e){console.error("Error could not login: "+e)}e.submit=function(){r.login(e.user,t,n)}}]),MyApp.controller("MainController",["$scope","ApiService","ImgService",function(e,o,r){o.getSessionToken(),e.setCurrentUser=function(o){e.currentUser=o},e.setCurrentUser(o.getSessionUser()),e.userLoggedIn=function(){return void 0!=o.getSessionUser()},e.pushRoom=function(o){var r=!1;e.openRooms.forEach(function(e){e._id.toString()==o._id.toString()&&(r=!0)}),r||e.openRooms.push(o)},e.removeRoom=function(o){e.openRooms.splice(e.openRooms.indexOf(o),1)},e.openRooms=[],e.showImage=function(e){return r.showAvatar(e)},e.logout=function(){o.logout(),e.setCurrentUser(void 0)}}]),MyApp.controller("NewRoomController",["$scope","$location","ApiService",function(e,o,r){function t(e){o.path("/room/"+e.room._id)}e.createRoom=function(){r.createRoom(e.newroom,t)}}]),MyApp.controller("OtherController",["$scope",function(e){e.filter=!0,e.toggleFilter=function(){e.filter=!e.filter}}]),MyApp.controller("RegisterController",["$scope","$location","ApiService",function(e,o,r){function t(){o.path("/login")}e.user={nickname:"",email:"",password:"",role:"user",avatar:"",avatarFileType:""},e.avatar={},e.$watch("avatar",function(e,o,r){e.filesize>5e5?(r.avatar={},r.errormsg="Avatar too big"):(r.user.avatar=e.base64,r.user.avatarFileType=e.filetype)}),e.submit=function(){r.register(e.user,t)}}]),MyApp.controller("RoomController",["$scope","$stateParams","$location","$anchorScroll","ApiService",function(e,o,r,t,n){function s(r){n.getRoom(o.roomId).then(function(o){e.room=o.room,e.messages=o.room.messages,e.moderator=o.moderator,e.messages.reverse()})}function i(o){s({}),setTimeout(function(){r.hash("sendbtn"),t()},1e3),e.newmsg=""}function a(r){!angular.equals(e.currentUser,{})&&e.moderator&&n.getUsersForRoom(o.roomId).then(function(o){e.members=o})}function c(o){e.editSuccess=!0,setTimeout(function(){e.editSuccess=!1},5e3),s({})}s({}),setTimeout(function(){r.hash("sendbtn"),t(),e.newroom={name:e.room.name,inviteonly:e.room.inviteonly,unlisted:e.room.unlisted}},1e3);var u=setInterval(s,1e3);e.editSuccess=!1,e.send=function(){n.sendMessage(o.roomId,e.newmsg,i)},e.editRoom=function(){e.editSuccess=!1,e.changePassword?void 0!=e.newroom&&void 0!=e.newroom.password||(e.newroom.password=""):delete e.newroom.password,n.editRoom(o.roomId,e.newroom,c)},e.findUserByName=function(){n.findUserByName(e.userToFind).then(function(o){e.foundUser=o})},e.blockUser=function(e){n.blockUser(e,s)},e.setMemberShip=function(e,r){n.setMembership(e._id,o.roomId,r,a)},e.refUsers=function(){a({})},e.formatDate=function(e){return new Date(e).toLocaleString()},e.$on("$destroy",function(){clearInterval(u)})}]);
//# sourceMappingURL=app.min.js.map
